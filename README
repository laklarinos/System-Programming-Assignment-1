Documentation of assignment #1 for class System Programming.

Student: Lakes Athanasios
sdi: 1800090
Semester: 6

	This is a documentation of the first assignment for System Programming.The application is called vaccineMonitor and can be 
	compiled by using the “make” command and it was written in C++ with the best of intentions.
	I have implemented all the requirements (commands) while also keeping track of the memory and de-allocating it.
	The program is separated into different .cpp and .h files and each of them has a specific purpose. More specifically:

1)	main.cpp/.h
2)	hashTable.cpp/.h
3)	linkedList.cpp/.h
4)	person.cpp/.h
5)	skip-list.cpp/.h
6) 	bloom-filter.cpp/.h
7) 	date.cpp/.h
8)	helpers.cpp/.h
9) 	Makefile
10)	virusesFile/countriesFile/inputFile (empty at first) .txt
11)	testFile.sh (bash script)




Hash tables and list nodes
	I use hash tables in order to save the information. Basically, Hash tables have pointers to cells of specific arrays that 
	save person objects or strings (countries, viruses).
	The hash tables are implemented in a kind of dynamic way.

	The are firstly initialized with a specific number of buckets but later on they pass through at least one checking where 
	their size may decrease or increase. Whenever I insert a new virus/country/citizen I check the hash tables and I increase 
	or decrease their size if needed. Every hash has a linked list for every bucket. This is how I handle collisions.
	A linked list node may contain a pointer to a person (citizenHash) or a pointer to a string (countryHash or virusHash). 
	As the type of the pointer may differ, I have defined this pointer as void* and using some indications I can claim weather 
	this list node contains a person or a string pointer. More specifically, whenever I want to create a linkedListNode object, 
	it is necessary to provide either a pointer to a person or a pointer to a string. On either case, I initilize an attribute 
	called type to ‘p’ (person) or ‘s’ (string). Also hash tables have such an attribute.


Person object.


	Each citizen has an array of pointers to viruses, an array of datesOfVaccination and an array of vaccinated statements(YES/NO).
	I do so as each citizen may have multiple viruses. A better implementation would be to save only the dates of vaccination in 
	skip list nodes so I can use the skip list in order to check if a citizen is vaccinated. Of course I make use of skip lists, but with 
	the current implementation I provide a more straight forward access to that information.

	To tell you the truth, it was this that I came up with in order to solve the “multiple viruses of a citizen” problem but looking back, 
	it needs some improvements.Doing that I provide 2 effective solution for two different problems:
	
	1) having the citizen and wanting to gain info for a specific virus of the citizen → use of arrays.
	2) Having the virus and wanting to gain info for the citizens, skip list…
	
	I define a not vaccinated Date as 0-0-0000.

	Each citizen also has a pointer to his country. Each node of the hash table contains a pointer to a specific citizen that is saved in 
	an array (person** array). That remains the same for virus hash table and country hash table. Each node of virus hash table has a 
	bloom filter and a vaccinated and not vaccinated skip list.
	
	
	

Skip List.
	
	Each skip list contains an array whose cells are pointing to the respective level of skip list. The levels are allocated in a dynamic way.
 	Furthermore, each level contains a linked list, with skip list nodes. Each skip list node has the id of the citizen, and a pointer to this 
	person instance as much as a pointer to the next skip list node and a pointer to the one underneath.The bloom filter is an array 
	of type uint8_t and of size 1024*numGiven.

	

As regards the input.
	
	My app is able to recognise records in the form:
	
	id, name, surname, age, country, virus, vaccination statement, [date]
	
	It is because of the bash script that only these types of records can be generated. Thus, the behaviour of my app given, for example,
	 records with no id value, or no age is undefined. Having said that, my app is able to recognise some cases of records. More specifically:
	
		1) When a citizen has 2 records for the same virus, I drop the second and print error message.
		2) When two citizens have the same id but they differ in one of the name, surname, age, country. When that happens, 
		I keep the first record and drop the second.
		
		3) A citizen has two or more records for different viruses I keep the all and keep track of the information accordingly.
	
	

	Here I need to point out that two exactly similar records cannot be generated by the bash script. In order to check how my app 
	behaves in this situation I will provide a file with some records in it that you can use apart from those that you can generate using the bash script.
	





Compiling.
	
In order to compile the app I have created a Makefile, simply type “make” and it will do it for you. In order to run you can either type:
	
	./vaccineMonitor -c inputFile.txt -b size of bloom or
	./vaccineMonitor -b size of bloom -c inputFile.txt

	In any other case, an error message will pop up.
	You can use the makefile and simply type make run which by default runs this command:
	./vaccineMonitor -c inputFile.txt -b 100000
	
Bash script.

	In order to run the bash script, type:

	./testFile.sh countriesFile.txt virusesFile.txt #records YES/NO
	Be careful, the script does not override the file’s contents before writing in it so inputFile.txt must be empty.
		
	Simply run make bash which firstly empties the inputFile.txt 
	( : > inputFile.txt) ok that looks like a happy face with a cap…

	And then it runs: 
	./testFile.sh countriesFile.txt virusesFile.txt 2500 NO



IMPORTANT CREDITS…

This assignment was a real challenge for me and I would not be able to complete it without the help of: 
- 	My coffee machine…
- 	Blink-182…


	

	


 
